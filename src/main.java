/* Generated By:JavaCC: Do not edit this line. main.java */
import nodes.*; // Import all the node classes
import java.util.Scanner; // Import the Scanner class for input
public class main implements mainConstants {
    public static void main(String[] args)  throws ParseException {
        main parser = new main(System.in); // Create a parser object with standard input
        treeNode n = parser.start(); // Parse the input and get the root node of the syntax tree
        n.execute(); // Execute the syntax tree
    }

// Define the start production
  static final public treeNode start() throws ParseException {
                   treeNode n; blockNode b = new blockNode();
    n = blockSt();
       {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

// Define the block statement production
  static final public blockNode blockSt() throws ParseException {
                       treeNode n; blockNode b = new blockNode();
    jj_consume_token(32);
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        n = declareSt();
      } else if (jj_2_2(3)) {
        // Parse a declaration statement
                n = assignSt();
      } else if (jj_2_3(3)) {
        // Parse an assignment statement
                n = inputSt();
      } else if (jj_2_4(3)) {
        // Parse an input statement
                n = modificationSt();
      } else if (jj_2_5(3)) {
        // Parse a modification statement
                n = declareArray();
      } else if (jj_2_6(3)) {
        // Parse an array declaration statement
                n = outputSt();
      } else if (jj_2_7(3)) {
        // Parse an output statement
                n = ifSt();
      } else if (jj_2_8(3)) {
        // Parse an if statement
                n = whileSt();
      } else if (jj_2_9(3)) {
        // Parse a while statement
                n = switchSt();
      } else if (jj_2_10(3)) {
        // Parse a switch statement
                n = foreachSt();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
         b.addChild(n);
      if (jj_2_11(3)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(33);
       {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

// Define the declaration statement production
  static final public declareNode declareSt() throws ParseException {
    declareNode d = new declareNode(); // Create a declaration node
    stringNode dt = new stringNode(); // Create a string node for data type
    stringNode varname = new stringNode(); // Create a string node for variable name
    valueNode val = new valueNode(); // Create a value node for initial value
    Token t1, t2, t3; // Create tokens for data type, variable name, and initial value
    t3 = null;
    t1 = jj_consume_token(DATATYPE);
    // Expect a data type token
        t2 = jj_consume_token(VARNAME);
    if (jj_2_12(3)) {
      jj_consume_token(ASSIGN);
      t3 = value();
    } else {
      ;
    }
    jj_consume_token(END_STMNT);
    dt.setValue(t1.image); // Set the data type node value to the data type token image
    varname.setValue(t2.image); // Set the variable name node value to the variable name token image
    d.addChild(varname); // Add the variable name node as a child of the declaration node
    d.addChild(dt); // Add the data type node as a child of the declaration node
    if (t3 != null) { // If the initial value token is not null
        val.setValue(t3.image); // Set the value node value to the initial value token image
        d.addChild(val); // Add the value node as a child of the declaration node
    }
    {if (true) return d;} // Return the declaration node

    throw new Error("Missing return statement in function");
  }

// Define the array declaration statement production
  static final public arrayNode declareArray() throws ParseException {
    stringNode type = new stringNode(); // Create a string node for array type
    stringNode name = new stringNode(); // Create a string node for array name
    valueNode value; // Create a value node for array element
    arrayNode array = new arrayNode(); // Create an array node
    Token t1,t2, t3, t4;
    t1 = jj_consume_token(DATATYPE);
    jj_consume_token(34);
    t2 = jj_consume_token(VARNAME);
    jj_consume_token(ASSIGN);
    jj_consume_token(32);
    // Expect a data type token, followed by "[]", followed by a variable name token, followed by an assignment operator, followed by an opening brace
        t3 = value();
                   value = new valueNode(t3.image); array.addChild(value);
    label_2:
    while (true) {
      if (jj_2_13(3)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(35);
      t3 = value();
                         value = new valueNode(t3.image); array.addChild(value);
    }
    jj_consume_token(33);
    jj_consume_token(END_STMNT);
        type.setValue(t1.image); // Set the array type node value to the data type token image
        name.setValue(t2.image); // Set the array name node value to the variable name token image
        array.addChild(type); // Add the array type node as a child of the array node
        array.addChild(name); // Add the array name node as a child of the array node
        {if (true) return array;} // Return the array node

    throw new Error("Missing return statement in function");
  }

// Define the assignment statement production
  static final public assignNode assignSt() throws ParseException {
    assignNode z = new assignNode(); // Create an assignment node
    stringNode name = new stringNode(); // Create a string node for variable name
    valueNode val = new valueNode(); // Create a value node for assigned value
    Token t1, t2, t3;
    t1 = jj_consume_token(VARNAME);
    jj_consume_token(ASSIGN);
    // Expect an assignment operator token
        t2 = value();
    jj_consume_token(END_STMNT);
        name.setValue(t1.image); // Set the variable name node value to the variable name token image
        val.setValue(t2.image); // Set the value node value to the value token image
        z.addChild(name); // Add the variable name node as a child of the assignment node
        z.addChild(val); // Add the value node as a child of the assignment node
        {if (true) return z;} // Return the assignment node

    throw new Error("Missing return statement in function");
  }

// Define the modification statement production
  static final public modificationNode modificationSt() throws ParseException {
    modificationNode  m = new modificationNode (); // Create a modification node
    stringNode s1,s2; // Create string nodes for variable name and modification operator
    Token t1,t2;
    // This method parses a unary expression with either ++ or -- operator
    t1 = jj_consume_token(VARNAME);
    if (jj_2_14(3)) {
      t2 = jj_consume_token(36);
    } else if (jj_2_15(3)) {
      t2 = jj_consume_token(37);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(END_STMNT);
       // Create a string node for the variable name and the operator
       s1 = new stringNode(t1.image);
       s2 = new stringNode(t2.image);
       // Add them as children to the unary expression node
       m.addChild(s1);
       m.addChild(s2);
       {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

// This method parses an input statement that reads a value from the user and assigns it to a variable
  static final public inputNode inputSt() throws ParseException {
    // Create a scanner object to read from the standard input
    Scanner scan = new Scanner(System.in);
    // Create an input node to represent the input statement
    inputNode in = new inputNode();
    // Create a string node to store the variable name
    stringNode varname = new stringNode();
    // Create a string node to store the input value
    stringNode input = new stringNode();
    // Declare a string variable to store the input value
    String read;
    // Declare a token variable to store the variable name
    Token t1;
    // Parse the variable name
        t1 = jj_consume_token(VARNAME);
    jj_consume_token(ASSIGN);
    jj_consume_token(READ);
    jj_consume_token(38);
    jj_consume_token(END_STMNT);
        // Set the value of the variable name node to the image of the token
        varname.setValue(t1.image);
        // Add the variable name node as a child to the input node
        in.addChild(varname);
        // Return the input node
        {if (true) return in;}
    throw new Error("Missing return statement in function");
  }

// This method parses an output statement that writes one or more values to the standard output
  static final public outputNode outputSt() throws ParseException {
    // Create an output node to represent the output statement
    outputNode out = new outputNode();
    // Create a tree node to store the value to be printed
    treeNode print = new stringNode();
    // Declare a token variable to store the value
    Token t1;
    jj_consume_token(WRITE);
    jj_consume_token(39);
    if (jj_2_20(3)) {
      if (jj_2_16(3)) {
        t1 = jj_consume_token(VARNAME);
                     stringNode s = new stringNode(t1.image); out.addChild(s);
      } else if (jj_2_17(3)) {
        t1 = jj_consume_token(STRING);
                                                                                                 stringNode s = new stringNode(t1.image); out.addChild(s);
      } else if (jj_2_18(3)) {
        t1 = jj_consume_token(INT);
                                                                                                                                                                          constNode c = new constNode(t1.image); out.addChild(c);
      } else if (jj_2_19(3)) {
        t1 = jj_consume_token(DOUBLE);
                                                                                                                                                                                                                                                    constNode c = new constNode(t1.image); out.addChild(c);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    label_3:
    while (true) {
      if (jj_2_21(3)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(POS);
      if (jj_2_22(3)) {
        t1 = jj_consume_token(VARNAME);
                            stringNode s = new stringNode(t1.image); out.addChild(s);
      } else if (jj_2_23(3)) {
        t1 = jj_consume_token(STRING);
                                                                                                        stringNode s = new stringNode(t1.image); out.addChild(s);
      } else if (jj_2_24(3)) {
        t1 = jj_consume_token(INT);
                                                                                                                                                                                 constNode c = new constNode(t1.image); out.addChild(c);
      } else if (jj_2_25(3)) {
        t1 = jj_consume_token(DOUBLE);
                                                                                                                                                                                                                                                           constNode c = new constNode(t1.image); out.addChild(c);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(40);
    jj_consume_token(END_STMNT);
        // Return the output node
        {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

// This method parses an if statement with an optional else clause
  static final public ifNode ifSt() throws ParseException {
    // Create an if node to represent the if statement
    ifNode i = new ifNode();
    // Create a condition node to store the condition expression
    conditionNode c;
    // Create a block node to store the statements in the if branch
    blockNode bif = new blockNode();
    // Create a block node to store the statements in the else branch
    blockNode belse = new blockNode();
    jj_consume_token(IF);
    c = condition();
    // Parse the statements in the if branch
        bif = blockSt();
        // Add the condition node and the if branch node as children to the if node
        i.addChild(c);
        i.addChild(bif);
    if (jj_2_26(3)) {
      jj_consume_token(ELSE);
      belse = blockSt();
        // Add the else branch node as a child to the if node
        i.addChild(belse);
    } else {
      ;
    }
        // Return the if node
        {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

// This method parses a while statement with a condition expression and a block of statements
  static final public whileNode whileSt() throws ParseException {
    // Create a while node to represent the while statement
    whileNode wile = new whileNode();
    // Create a condition node to store the condition expression
    conditionNode cond = new conditionNode();
    // Create a block node to store the block of statements
    blockNode block = new blockNode();
    jj_consume_token(WHILE);
    cond = condition();
    // Parse the block of statements
            block = blockSt();
            // Add the condition node and the block node as children to the while node
            wile.addChild(cond);
            wile.addChild(block);
            // Return the while node
            {if (true) return wile;}
    throw new Error("Missing return statement in function");
  }

// This method parses a condition expression that consists of one or more relational expressions connected by logical operators
  static final public conditionNode condition() throws ParseException {
    // Declare a condition node variable to store the condition expression
    conditionNode c;
    // Declare two value node variables to store the operands of a relational expression
    valueNode v1, v2;
    // Declare a string node variable to store the operator of a relational expression
    stringNode s;
    // Declare three token variables to store the tokens of a relational expression
    Token t1, t2, t3;
    // Declare a token variable to store the logical operator of a condition expression
    Token cond;
    jj_consume_token(39);
    // Parse the first relational expression, which consists of two values and a relational operator
        t1 = value();
    t3 = jj_consume_token(REL_OPS);
    t2 = value();
        // Create a value node for each operand and a string node for the operator
        v1 = new valueNode(t1.image);
        v2 = new valueNode(t2.image);
        s = new stringNode(t3.image);
        // Create a condition node for the relational expression and add the nodes as children
        c = new conditionNode();
        c.addChild(v1);
        c.addChild(v2);
        c.addChild(s);
    label_4:
    while (true) {
      if (jj_2_27(3)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_28(3)) {
        cond = jj_consume_token(COND_OPS);
      } else if (jj_2_29(3)) {
        cond = jj_consume_token(COND_OPS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      t1 = value();
      t3 = jj_consume_token(REL_OPS);
      t2 = value();
        // Create a new condition node for the logical operator and add the previous condition node as a child
        c = new conditionNode(cond.image);
        System.out.println("new condition");
        // Create a value node for each operand and a string node for the operator of the relational expression
        v1 = new valueNode(t1.image);
        v2 = new valueNode(t2.image);
        s = new stringNode(t3.image);
        // Add the nodes as children to the condition node
        c.addChild(v1);
        c.addChild(v2);
        c.addChild(s);
    }
    jj_consume_token(40);
        // Return the condition node
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

// This method parses a switch statement that consists of a variable name, a list of cases, and a default case
  static final public switchNode switchSt() throws ParseException {
    // Create a switch node to represent the switch statement
    switchNode s = new switchNode();
    // Create a block node to store the statements in each case
    blockNode b;
    // Create two string nodes to store the variable name and the case value
    stringNode s1, s2;
    // Create a const node to store the case value if it is a constant
    constNode c;
    // Declare two token variables to store the variable name and the case value
    Token t1, t2;
    jj_consume_token(SWITCH);
    jj_consume_token(39);
    t1 = jj_consume_token(VARNAME);
        // Create a string node for the variable name and add it as a child to the switch node
        s1 = new stringNode(t1.image);
        s.addChild(s1);
    jj_consume_token(40);
    jj_consume_token(32);
    label_5:
    while (true) {
      jj_consume_token(CASE);
      if (jj_2_30(3)) {
        t2 = jj_consume_token(STRING);
                            s2 = new stringNode(t2.image); s.addChild(s2);
      } else if (jj_2_31(3)) {
        t2 = jj_consume_token(INT);
                                                                                          c = new constNode(t2.image); s.addChild(c);
      } else if (jj_2_32(3)) {
        t2 = jj_consume_token(DOUBLE);
                                                                                                                                                       c = new constNode(t2.image); s.addChild(c);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(41);
      b = blockSt();
                       s.addChild(b);
      jj_consume_token(BREAK);
      jj_consume_token(END_STMNT);
      if (jj_2_33(3)) {
        ;
      } else {
        break label_5;
      }
    }
    jj_consume_token(DEF);
    jj_consume_token(41);
    b = blockSt();
                             s.addChild(b);
    jj_consume_token(BREAK);
    jj_consume_token(END_STMNT);
    jj_consume_token(33);
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public foreachNode foreachSt() throws ParseException {
                           foreachNode f; stringNode s1, s2, s3; blockNode b; Token t1, t2, t3;
    jj_consume_token(FOREACH);
    jj_consume_token(39);
    t3 = jj_consume_token(DATATYPE);
    t1 = jj_consume_token(VARNAME);
    jj_consume_token(IN);
    t2 = jj_consume_token(VARNAME);
    jj_consume_token(40);
    b = blockSt();
                                                                                     s1 = new stringNode(t1.image); s2 = new stringNode(t2.image); s3 = new stringNode(t3.image); f = new foreachNode(s1, s2, s3, b); {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public Token value() throws ParseException {
                 Token t;
    if (jj_2_34(3)) {
      t = jj_consume_token(VARNAME);
                   {if (true) return t;}
    } else if (jj_2_35(3)) {
      t = jj_consume_token(STRING);
                      {if (true) return t;}
    } else if (jj_2_36(3)) {
      t = jj_consume_token(INT);
                   {if (true) return t;}
    } else if (jj_2_37(3)) {
      t = jj_consume_token(DOUBLE);
                      {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(VARNAME)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(READ)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(DATATYPE)) return true;
    if (jj_scan_token(VARNAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_scan_token(END_STMNT)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(DATATYPE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(32)) return true;
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(VARNAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    if (jj_scan_token(END_STMNT)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(COND_OPS)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(VARNAME)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(POS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(COND_OPS)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(DATATYPE)) return true;
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    if (jj_3R_16()) return true;
    if (jj_scan_token(REL_OPS)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(39)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public mainTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[37];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public main(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public main(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new mainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public main(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new mainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public main(mainTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(mainTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
